{
  "hash": "7874595f8e269aecdd94fc11b9404fa0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Dot Product Intuition\"\nauthor: \"Madiyar Aitbayev\"\ndate: \"2025-01-10\"\ncategories: [math]\nimage: \"images/image.jpg\"\ndraft: true\ndraft-mode: \"unlinked\"\n---\n\n\n# Dot Product Intuition\n\n## Introduction\n\nThe **dot product** (or **scalar product**) is a simple yet powerful operation that is used in many places in Machine Learning and other fields. In this post, I will explain the geometric intuition behind the dot product. You need to have a basic grasp of trigonometry to follow this post.\n\nFeel free to ask questions on [my telegram channel](https://t.me/swemanml)\n\n## Recap\n\nMore beginner friendly explanations are available in the following resources:\n\n-   https://en.wikipedia.org/wiki/Dot_product\n-   https://brilliant.org/wiki/dot-product-definition\n-   https://betterexplained.com/articles/vector-calculus-understanding-the-dot-product/\n\nFeel free to checkout the above or other resources first.\n\nAssume we have two vectors $\\textbf{a}=[a_1, a_2, \\cdots, a_n]$ and $\\textbf{b} = [b_1, b_2, \\cdots, b_n]$, then there are two definitions of the dot product: **algebraic** and **geometric**.\n\n### Algebraic definition\n\nThe dot product of $\\textbf{a}$ and $\\textbf{b}$ is:\n\n$$\n\\textbf{a} \\cdot \\textbf{b} = \\sum_{i=1}^n{a_ib_i} = a_1b_1+a_2b_2+\\cdots+a_nb_n\n$$\n\n### Geometric definition\n\nThe dot product of $\\textbf{a}$ and $\\textbf{b}$ is: \n$$\n\\textbf{a} \\cdot \\textbf{b} = \\|\\mathbf{a}\\|\\|\\mathbf{b}\\|\\cos \\theta\n$$\n\nwhere $\\theta$ is the angle between **a** and **b** and $\\|\\textbf{a}\\|$ is the magnitude of a vector **a**.\n\nThe geometric definition gives us a few useful properties:\n\n-   The dot product is zero when **a** and **b** are orthogonal, since $\\cos(90 \\degree) = 0$\n-   The dot product is positive for acute angles and negative for obtuse, e.g., $\\cos(45\\degree)$ or $\\cos(89\\degree)$ are positive but $\\cos(180\\degree), \\cos(91\\degree)$ are negative.\n-   We can find the angle between vectors by $\\theta = \\arccos(\\frac{\\textbf{a} \\cdot \\textbf{b}}{\\|\\mathbf{a}\\|\\|\\mathbf{b}\\|})$. A picture from Wikipedia:\n\n![Source Wikipedia](https://upload.wikimedia.org/wikipedia/commons/7/76/Inner-product-angle.svg){width=\"300\"}\n\n## Equivalence?\n\nWait, how can the algebraic and geometric definitions be the same? How is $cos( \\theta)$ related to such a straightforward sum of components? These were the questions I asked when I first encountered the dot product. I accepted the fact and moved on with my life until today. I will try to understand myself and also explain by interactive visualizations.\n\n\n```{ojs}\n//| echo: false\nJXG = await require('https://cdnjs.cloudflare.com/ajax/libs/jsxgraph/1.10.1/jsxgraphcore.js')\n```\n\n```{ojs}\n//| echo: false\n\nfunction board_div(name, width=500) {\n  return html`<div \n    id=${name} \n    style='max-width:${width}px; aspect-ratio: 1; \n            margin-inline: auto'>\n  </div>` \n}\n```\n\n```{ojs}\n//| echo: false\n\nfunction make_board(name, extend=5.5) {\n  return JXG.JSXGraph.initBoard(name, {\n    boundingbox: [-extend, extend, extend, -extend],\n    showCopyright: false,\n    showNavigation: false,\n    axis: true,\n    grid: false,\n    pan: {\n      needTwoFingers: true\n    },\n    defaultAxes: {\n      x: {\n        ticks: {\n          insertTicks: false,\n          minorTicks: 0,   \n          majorHeight: 5,\n          ticksDistance: 1,\n          strokeOpacity: 0.8,\n          strokeColor: '#000000',\n          strokeWidth: 1 \n        }\n      },\n      y: {\n        ticks: {\n          insertTicks: false,\n          minorTicks: 0,\n          majorHeight: 5,\n          strokeOpacity: 0.8,\n          strokeColor: '#000000',\n          strokeWidth: 1 \n        }\n      }\n    },\n  });\n}\n```\n\n```{ojs}\n//| echo: false\n\nfunction make_board1() {\n  function vec_length(a)  {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  }\n  function vec_unit(a) {\n    const len = vec_length(a);\n    return vec_scale(a, 1 / len);\n  }\n  function vec_scale(a, scalar) {\n    return [a[0] * scalar, a[1] * scalar];\n  }\n  function vec_dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function vec_cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n  }\n  function vec_mid(a, b) {\n    return vec_scale(vec_add(a, b), 0.5);\n  }\n\n  function vec_rot90(v) {\n    return [-v[1], v[0]];\n  }\n  function vec_add(a, b) {\n    return [a[0] + b[0], a[1] + b[1]];\n  }\n\n  function calcP(a, b) {\n    const unit_b = vec_unit(b);\n    return vec_scale(unit_b, vec_dot(a, unit_b));\n  }\n  function calcUnder(p, a, delta=0.15) {\n    var n = vec_scale(vec_rot90(p), delta / vec_length(p));\n    if (vec_cross(a, p) < 0) {\n      n = vec_scale(n, -1);\n    }\n    return [n, vec_add(p, n)];\n  }\n  const a = [2.5, 2];\n  const b = [1, 0];\n  const p = [a[0], 0];\n  var board = make_board(\"board1\", 3.5);\n  const pointa = board.create(\"point\", a, {\n    fixed: false,\n    name: \"a\",\n    color: \"blue\"\n  })\n  const pointb = board.create(\"point\", b, {\n    fixed: true,\n    name: \"b\",\n    color: \"red\"\n  })\n  const linea = board.create(\"line\", [[0, 0], pointa], {\n    fixed: true,\n    straightFirst:false, \n    straightLast:false, \n    lastArrow:true,\n    strokeColor: \"blue\",\n    strokeWidth: 2\n  });\n  const lineb = board.create(\"line\", [[0, 0], pointb], {\n    fixed: true,\n    straightFirst:false, \n    straightLast:false, \n    lastArrow:true,\n    strokeColor: \"red\",\n    strokeWidth: 2\n  });\n\n  const pointp = board.create(\"point\", [function() {\n    return calcP([pointa.X(), pointa.Y()], [pointb.X(), pointb.Y()])[0];\n  }, function() {\n    return calcP([pointa.X(), pointa.Y()], [pointb.X(), pointb.Y()])[1];\n  }], {\n    fixed: true,\n    name: \"p\",\n    fillColor: \"black\",\n    strokeColor: \"black\",\n    size: 5,\n  })\n  const lineap = board.create(\"line\", [pointa, pointp], {\n    fixed: true,\n    straightFirst:false, \n    straightLast:false, \n    dash: 2,\n    strokeColor: \"black\",\n    strokeWidth: 1\n  })\n  const rightAngle = board.create(\"nonreflexangle\", [pointa, pointp, pointb], {\n    name: \"\",\n    strokeColor: \"black\",\n    strokeWidth: 0.7,\n    fillColor: \"#00000000\",\n    radius: 0.3\n  });\n  const pointo = board.create(\"point\", [0, 0], {\n    visible: false,\n    fixed: true,\n    name: \"o\",\n    // color: \"red\",\n  });\n  const alphaAngle = board.create(\"angle\", [pointb, pointo, pointa], {\n    name: \"θ\"\n  });\n  const lineGreen = board.create(\"line\", [function() {\n    return calcUnder([pointp.X(), pointp.Y()], [pointa.X(), pointa.Y()])[0];\n  }, function() {\n    return calcUnder([pointp.X(), pointp.Y()], [pointa.X(), pointa.Y()])[1];\n  }], {\n    fixed: true,\n    name: \"Hell\",\n    straightFirst:false, \n    straightLast:false, \n    strokeColor: \"green\",\n    dash: 1,\n    strokeWidth: 2,\n    label:{offsets:[-1,1]}\n  });\n  const slider = board.create('slider', [[-1, -2], [1, -2], [0, 0, 360]], {\n    name: \"Rotate\",\n    snapWidth: 1\n  });\n  const text = board.create('text', [function() {\n    const s = calcUnder([pointp.X(), pointp.Y()], [pointa.X(), pointa.Y()], 0.4);\n    return vec_mid(s[0], s[1])[0];\n  }, function() {\n    const s = calcUnder([pointp.X(), pointp.Y()], [pointa.X(), pointa.Y()], 0.4);\n    return vec_mid(s[0], s[1])[1];\n  }, '||a|| cos(θ)'], {\n    anchorX: \"middle\",\n    anchorY: \"middle\",\n    fontSize: 19,\n  })\n  const rot = board.create('transform', [function(){return slider.Value() / 180 * Math.PI;}, [0, 0]], {type:'rotate'});\n  rot.bindTo([pointb, pointa]);\n}\n```\n\n```{ojs}\n//| echo: false\nboard_div(\"board1\")\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{\n  make_board1()\n}\n```\n\n::: {#b5fca4e2 .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}